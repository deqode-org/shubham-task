{"version":3,"sources":["Pages/Dashboard/Dashboard.module.css","Api/index.js","Components/SearchInputTextfield/index.jsx","Pages/Dashboard/index.jsx","Routes/path.js","Routes/index.jsx","App.jsx","serviceWorker.js","index.jsx","Components/SearchInputTextfield/SearchInputTextfield.module.css"],"names":["module","exports","getRandomBool","n","Math","floor","random","getSuggestions","text","results","push","Promise","resolve","reject","randomTimeout","setTimeout","KEYBOARD_KEYS","SearchInputTextfield","props","onKeyDown","e","state","suggestions","activeSuggestion","keyCode","length","setState","showSuggestions","updateText","preventDefault","words","textEntered","split","join","onSuggestionClick","stopPropagation","currentTarget","innerText","inputRef","current","focus","getSuggestionsForWord","a","console","error","onInputChange","event","target","value","lastWord","pop","debouncedFunc","React","createRef","debounce","this","className","styles","companyWrapper","autoFocus","type","placeholder","onChange","ref","onOutsideClick","listContainer","map","optionName","index","key","onClick","Component","Dashboard","app","Paths","Redirect","Routes","basename","process","path","component","from","to","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e869c1c6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"Dashboard_app__s7MPl\"};","// Provided for API Mocks\n\nconst FAILURE_COEFF = 10;\nconst MAX_SERVER_LATENCY = 200;\n\nfunction getRandomBool(n) {\n  const maxRandomCoeff = 1000;\n  if (n > maxRandomCoeff) n = maxRandomCoeff;\n  return Math.floor(Math.random() * maxRandomCoeff) % n === 0;\n}\n\nfunction getSuggestions(text) {\n  const pre = \"pre\";\n  const post = \"post\";\n  const results = [];\n  if (getRandomBool(2)) {\n    results.push(pre + text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text);\n  }\n  if (getRandomBool(2)) {\n    results.push(text + post);\n  }\n  if (getRandomBool(2)) {\n    results.push(pre + text + post);\n  }\n  return new Promise((resolve, reject) => {\n    const randomTimeout = Math.random() * MAX_SERVER_LATENCY;\n    setTimeout(() => {\n      if (getRandomBool(FAILURE_COEFF)) {\n        reject();\n      } else {\n        resolve(results);\n      }\n    }, randomTimeout);\n  });\n}\n\nexport default getSuggestions;\n","import React from \"react\";\nimport OnOutsiceClick from \"react-outclick\";\nimport { debounce } from \"lodash\";\nimport getSuggestions from \"../../Api\";\nimport styles from \"./SearchInputTextfield.module.css\";\n\nconst KEYBOARD_KEYS = {\n  ENTER: 13,\n  UP_ARROW: 38,\n  DOWN_ARROW: 40,\n};\n\nclass SearchInputTextfield extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      textEntered: '',\n      showSuggestions: false,\n      activeSuggestion: 0, \n      suggestions: [], \n    };\n\n    this.inputRef = React.createRef();\n    this.debouncedFunc = debounce(this.getSuggestionsForWord, 400);\n  }\n\n  onKeyDown = (e) => {\n    const { suggestions, activeSuggestion } = this.state;\n    switch(e.keyCode) {\n      case KEYBOARD_KEYS.ENTER: {\n        if (suggestions.length === 0) return;\n        this.setState({ activeSuggestion: 0, showSuggestions: false });\n        this.updateText(`${suggestions[activeSuggestion]} `);\n        return;\n      }\n      case KEYBOARD_KEYS.UP_ARROW: {\n        e.preventDefault();\n        if (activeSuggestion === 0) return;\n        this.setState({ activeSuggestion: activeSuggestion - 1 });\n        return;\n      }\n      case KEYBOARD_KEYS.DOWN_ARROW: {\n        e.preventDefault();\n        if (activeSuggestion === suggestions.length - 1) return;\n        this.setState({ activeSuggestion: activeSuggestion + 1 });\n        return;\n      }\n    }\n  };\n\n  updateText = (text) => {\n    const { textEntered } = this.state;\n    const words = textEntered.split(\" \");\n    words[words.length - 1] = text;\n    this.setState({ textEntered: words.join(\" \") });\n  };\n\n  onSuggestionClick = (e) => {\n    e.stopPropagation();\n    this.updateText(`${e.currentTarget.innerText} `);\n    this.setState({ activeSuggestion: 0, showSuggestions: false });\n    this.inputRef.current.focus();\n  };\n\n  getSuggestionsForWord = async (text) => {\n    try {\n      const suggestions = await getSuggestions(text);\n      this.setState({ suggestions, showSuggestions: true })\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  onInputChange = (event) => {\n    const textEntered = event.target.value;\n    this.setState({ \n      textEntered, \n      showSuggestions: false,\n      suggestions: [],\n    });\n    \n    const lastWord = textEntered.split(\" \").pop();\n    if (lastWord !== \"\") {\n      this.debouncedFunc(lastWord)\n    }\n  }\n\n  render() {\n    const { textEntered, showSuggestions, suggestions, activeSuggestion } = this.state;\n\n    return (\n      <div className={styles.companyWrapper}> \n        <input\n          autoFocus\n          type=\"text\"\n          placeholder=\"Search\"\n          className=\"form-control\"\n          value={textEntered}\n          onKeyDown={this.onKeyDown}\n          onChange={this.onInputChange}\n          ref={this.inputRef}\n        />\n        <OnOutsiceClick onOutsideClick={() => this.setState({ showSuggestions: false})}>\n          <div className={`list-group ${styles.listContainer}`}>\n            {showSuggestions && suggestions && suggestions.map((optionName, index) => (\n              <button \n                type=\"button\" \n                className={`list-group-item list-group-item-action ${activeSuggestion === index && \"active\"}`}\n                key={optionName}\n                onClick={this.onSuggestionClick}\n              >\n              {optionName}\n            </button>\n            ))}\n          </div>\n        </OnOutsiceClick>\n      </div>\n    );\n  }\n}\n\nexport default SearchInputTextfield;\n","import React from \"react\";\nimport SearchInputTextfield from \"../../Components/SearchInputTextfield\";\nimport styles from \"./Dashboard.module.css\";\n\nconst Dashboard = () => (\n  <div className={styles.app}>\n    <SearchInputTextfield />\n  </div>\n);\n\nexport default Dashboard;\n","const Paths = {\n  Dashboard: \"/\",\n  Redirect: \"*\",\n};\n\nexport default Paths;\n","import React from \"react\";\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\nimport Dashboard from \"../Pages/Dashboard\";\nimport Paths from \"./path\";\n\nconst Routes = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Route path={Paths.Dashboard} component={Dashboard} />\n    <Redirect from={Paths.Redirect} to={Paths.Dashboard} />\n  </Router>\n);\n\nexport default Routes;\n","import React from \"react\";\nimport Routes from \"./Routes\";\n\nconst App = () => <Routes />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\"\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === \"[::1]\"\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \"\n              + \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \"\n                  + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"companyWrapper\":\"SearchInputTextfield_companyWrapper__3oNmO\",\"listContainer\":\"SearchInputTextfield_listContainer__2jHdP\"};"],"sourceRoot":""}